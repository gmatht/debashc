pub fn show_help(program_name: &str) {
    println!("sh2perl - Shell Script to Multiple Language Translator");
    println!("Version: 1.0.0");
    println!();
    println!("USAGE:");
    println!("  {} <command> [options] [input]", program_name);
    println!();
    println!("COMMANDS:");
    println!();
    println!("  lex <input>                    - Tokenize shell script input");
    println!("  parse <input>                  - Parse shell script to AST");
    println!("  file <filename>                - Parse shell script from file");
    println!("  interactive                    - Start interactive mode");
    println!();
    println!("TRANSLATION OPTIONS:");
    println!();
    println!("  parse --perl <input>           - Convert shell script to Perl");
    
    println!();
    println!("  file --perl <filename>         - Convert shell script file to Perl");
    
    println!();
    println!("EXECUTION OPTIONS:");
    println!();
    println!("  parse --run <lang> <input>     - Generate and run code in specified language");
    println!("  file --run <lang> <filename>   - Generate and run code from file");
            println!("  Supported languages: perl");
    println!();
    println!("INPUT/OUTPUT OPTIONS:");
    println!();
    println!("  -i <filename>                  - Always treat as input file (even if doesn't end in .sh)");
    println!("  -o <filename>                  - Output translated code to file instead of running it");
    println!("  <filename>.sh                  - Run shell script directly (auto-detected)");
    println!("  <shell_command>                - Run shell command directly (auto-detected)");
    println!();
    println!("TESTING OPTIONS:");
    println!();
    println!("  --test-file <lang> <filename>  - Compare outputs of .sh vs translated code");
    println!("  file --test-file <lang> <filename> - Same as above");
    println!("  --test-eq                      - Test all generators against all examples");
    println!("  --uses-of-system               - Translate all examples/*.sh to Perl and find lines containing 'system'");
            println!("  --next-fail [NUM] [gen1 gen2 ...] - Test specified generators (or perl if none specified), exit after first failure");
        println!("                                   - If NUM is provided, run only the NUMth test");
        println!("  fail [NUM] [gen1 gen2 ...]      - Shorthand for --next-fail");
                        println!("  --clear-cache                    - Clear the command cache");
    println!();
    println!("AST FORMATTING OPTIONS (for --next-fail):");
    println!();
    println!("  --ast-pretty                   - Use pretty-printed AST with indentation and newlines");
    println!("  --ast-compact                  - Use compact AST format (default for --next-fail)");
    println!("  --ast-indent                   - Enable indentation in AST output");
    println!("  --ast-no-indent                - Disable indentation in AST output");
    println!("  --ast-newlines                 - Enable extra newlines in AST output");
    println!("  --ast-no-newlines              - Disable extra newlines in AST output");
    println!("  Note: --next-fail uses compact AST format by default for cleaner output");
    println!();
    println!("EXAMPLES:");
    println!();
    println!("  {} lex 'echo hello world'", program_name);
    println!("  {} parse 'echo hello world'", program_name);
    println!("  {} parse --perl 'echo hello world'", program_name);
    println!("  {} file --perl examples/simple.sh", program_name);
    println!("  {} --test-file perl examples/simple.sh", program_name);
    println!("  {} --test-eq", program_name);
            println!("  {} --next-fail", program_name);
        println!("  {} --next-fail 5", program_name);
        println!("  {} --next-fail perl", program_name);
        println!("  {} --next-fail 10 perl --ast-pretty", program_name);
    println!("  {} --clear-cache", program_name);
    println!();
    println!("DIRECT EXECUTION EXAMPLES:");
    println!("  {} examples/simple.sh           - Run shell script directly", program_name);
    println!("  {} 'echo Hello World!'          - Run shell command directly", program_name);
    println!("  {} -i myfile.txt -o output.pl   - Convert input file to Perl output file", program_name);
    println!("  {} -i script.txt                - Convert input file and run generated Perl", program_name);
    println!();
    println!("DESCRIPTION:");
    println!("  sh2perl is a tool that translates shell scripts to Perl. It can parse shell syntax,");
    println!("  generate equivalent Perl code, and optionally run the generated code to verify");
    println!("  correctness against the original shell script.");
    println!();
        println!("  The tool supports Perl as the target language. It can also generate pseudocode");
    println!("  in English for educational purposes.");
    println!();
    println!("  The --next-fail command can be used to test the Perl generator.");
    println!("  If no generators are specified, it defaults to testing only perl.");
    println!("  You can also specify a test number to run only that specific test");
    println!("  (e.g., --next-fail 5 to run only the 5th test).");
    println!();
                    println!("  The tool uses a cache to store bash script outputs and Perl code, improving test performance.");
                println!("  Cache is automatically updated when bash files change or tests fail.");
    println!("  Use --clear-cache to manually clear the cache if needed.");
    println!();
    println!("  For more information, visit: https://github.com/your-repo/sh2perl");
    println!();
}
